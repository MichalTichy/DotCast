@page "/"

<Layout Sider>
    <LayoutSider>
        <div class="authors">
            <span>Authors</span>
            @foreach (var authorName in Data.Select(t => t.AuthorName).Distinct().OrderBy(t => t))
            {
                <a class="authorLink" onclick="@($"document.getElementById('{authorName.Replace(" ", "")}').scrollIntoView({{behavior:'smooth'}})")">
                    <div>@authorName</div></a>
            }
        </div>
    </LayoutSider>
    <LayoutContent>
        <Field>
            <TextEdit Placeholder="Search" TextChanged="async (t) => await SearchTextChanged(t)" />
        </Field>

        @foreach (var author in Data.GroupBy(t => t.AuthorName).OrderBy(t => t.Key))
        {
            <a id="@author.Key.Replace(" ", "")">
            </a>
            <Divider DividerType="DividerType.TextContent" Text="@author.Key"></Divider>
                @foreach (var series in author.GroupBy(info => info.SeriesName?.ToLower().Trim()))
                {
                    @if (!string.IsNullOrWhiteSpace(series.Key))
                {
                    <div class="seriesDivider">@series.Key</div>
                }
                <div class="c-container">

                    @foreach (var podcast in series.OrderBy(info => info.OrderInSeries).ThenBy(info => info.Name))
                    {
                        <div class="c-card">
                            <div class="c-card-header">
                                <img src="@podcast.ImageUrl"/>
                            </div>
                            <div class="c-card-body">
                            
                                <h3>@podcast.Name</h3>

                                <div class="user">
                                    <b>@author.Key</b>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(@podcast.SeriesName))
                                {
                                    <b>@podcast.SeriesName - @podcast.OrderInSeries</b>
                                }
                            
                                <p>
                                    @podcast.Description
                                </p>
                            </div>
                            <div class="c-card-footer">
                                @if (podcast.Duration != null)
                                {
                                    <span>
                                        <Icon Name="IconName.Clock"/> @podcast.Duration.Value.ToString(@"hh\:mm")
                                    </span>
                                }
                                @if (PodcastDownloader.IsDownloadSupported(podcast.Id))
                                {
                                    <Button Clicked="async () => await Download(podcast)">
                                        <Icon Name="IconName.Download"></Icon>
                                    </Button>
                                }
                                <Button Clicked="() => NavigationManager.NavigateTo(podcast.Url,true)">
                                    <Icon Name="IconName.Rss"></Icon>
                                </Button>
                                <Button Clicked="() => Edit(podcast)">
                                    <Icon Name="IconName.Edit"></Icon>
                                </Button>
                            </div>
                        </div>
                    }
                    </div>

                }
        }
    </LayoutContent>
</Layout>