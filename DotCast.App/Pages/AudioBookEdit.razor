
@page "/AudioBook/{Id}/edit"
@inherits AppComponentBase
@using DotCast.SharedKernel.Models

<Row>
    <Column>

        <Button Color="Color.Info" Clicked="async () => await ShowSuggestions()">
            Suggestions
        </Button>
        <Button Color="Color.Primary" Clicked="@SaveAndExit">
            Save
        </Button>

    </Column>
</Row>
<Image Class="CoverImage" src="@Data.AudioBookInfo.ImageUrl" />
<Row>
    <Rating ReadOnly="true" SelectedValue="@((int)Math.Round(Data.Rating / 20.0))" />
</Row>

<Row>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Field >
            <FieldLabel>Name</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@Data.AudioBookInfo.Name" />
            </FieldBody>
        </Field>
    </Column>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Field >
            <FieldLabel>Author</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@Data.AudioBookInfo.AuthorName">
                </TextEdit>
            </FieldBody>
        </Field>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.IsHalf">

        <div id="categories">
            @foreach (var category in Data.AudioBookInfo.Categories)
            {
                <Badge Color="Color.Info" CloseClicked="@(() => RemoveCategory(category))">@category.Name</Badge>
            }
        </div>
    </Column>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Field>
            <FieldLabel>Add category</FieldLabel>
            <FieldBody>
                <SelectList TItem="Category" TValue="string"
                            Data="MissingCategories" TextField="category => category.Name" ValueField="category => category.Name" 
                            SelectedValueChanged="@(s => AddCategory(MissingCategories.Single(t=>t.Name==s)))"
                            DefaultItemText="Choose new category" ></SelectList>
            </FieldBody>
        </Field>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Field >
            <FieldLabel>Series Name</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="@Data.AudioBookInfo.SeriesName" />
            </FieldBody>
        </Field>
    </Column>
    <Column ColumnSize="ColumnSize.IsHalf">
        <Field >
            <FieldLabel>Order in series</FieldLabel>
            <FieldBody>
                <NumericPicker @bind-Value="Data.AudioBookInfo.OrderInSeries" Min="0" />
            </FieldBody>
        </Field>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.IsFull">

        <Field>
            <FieldLabel>Description</FieldLabel>
            <FieldBody>
                <TextEdit @bind-Text="Data.AudioBookInfo.Description" />
            </FieldBody>
        </Field>
    </Column>
</Row>
<Row>
    <Column ColumnSize="ColumnSize.IsFull">
        <Field >
            <FieldLabel>Upload files</FieldLabel>
            <FieldBody>    
                <FileUpload PresignedUrlFactory="CreatePresignedUrl" />
            </FieldBody>
        </Field>
    </Column>

</Row>

<Row>
    <Column ColumnSize="ColumnSize.IsFull">
        @if (Data?.AudioBookInfo.Chapters.Count > 0)
        {
            <DropContainer TItem="Chapter" Items="@Data.AudioBookInfo.Chapters" ItemsFilter="@((item, dropZone) => true)" ItemDropped="@ChapterOrderChanged" Flex="Flex.Wrap.Grow.Is1">
                <ChildContent>
       
                    <DropZone TItem="Chapter" Name="Chapters" AllowReorder Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
                        <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Chapters</Heading>
                        
                        <Button Color="Color.Info" Clicked="SortByName">
                            Sort by name
                        </Button>
                    </DropZone>
                </ChildContent>
                <ItemTemplate>
                    <Card Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
                        <CardBody>
                            @context.Name
                        </CardBody>
                    </Card>
                </ItemTemplate>
            </DropContainer>
        }
    </Column>
</Row>
<Modal @ref="suggestionsModalRef" >
    <ModalContent Centered Size="ModalSize.Fullscreen">
        <ModalHeader>
            <ModalTitle>Suggestions</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <div class="suggestions">
                @foreach (var suggestion in Suggestions)
                {

                    <Card Class="suggestion">
                        <CardImage Source="@suggestion.ImgUrl"/>
                        <CardBody>
                            <h1>@suggestion.Title</h1>
                            <b>@suggestion.Author</b>
                            <p>@string.Join(" ; ",suggestion.Categories.Select(t=>t.Name))</p>
                            @if (!string.IsNullOrWhiteSpace(suggestion.SeriesName))
                            {
                                <div><span>@suggestion.SeriesName</span> - <span>@suggestion.OrderInSeries</span></div>
                            }
                            <p>@suggestion.Description</p>
                            <Rating ReadOnly="true" SelectedValue="@((int) Math.Round(suggestion.PercentageRating / 20.0))"/> <br/>
                            <Button Color="Color.Link" Clicked="@(async () => await Prefill(suggestion))">Select</Button>
                        </CardBody>
                    </Card>
                }
            </div>
        </ModalBody>
    </ModalContent>
</Modal>
