@inject IJSRuntime js

<!-- Include this in your HTML where you want the file picker and progress bars -->
<input type="file" id="filePicker" multiple />
<div id="progressBars"></div>
<script>
    document.getElementById('filePicker').addEventListener('change', async function (e) {
        const files = e.target.files;
        const fileNames = Array.from(files).map(file => file.name);

        // Get pre-signed URLs from the server for all files at once
        try {
            const presignedUrls = await window.UploadHelpers.dotNetHelper.invokeMethodAsync('GeneratePresignedUrls', fileNames);

            for (let file of files) {
                // Create a progress bar for each file
                const progressBar = document.createElement("progress");
                progressBar.id = `progress_${file.name}`;
                progressBar.value = 0;
                progressBar.max = 100;
                document.getElementById('progressBars').appendChild(progressBar);

                // Get the pre-signed URL for this file
                const presignedUrl = presignedUrls[file.name];
                if (presignedUrl) {
                    await uploadFile(file, presignedUrl);
                    console.log(file.name + " uploaded successfully!");
                } else {
                    console.error("No pre-signed URL for " + file.name);
                }
            }
        } catch (error) {
            console.error("Error generating or retrieving pre-signed URLs: ", error);
        }
    });

</script>

@code {

    private DotNetObjectReference<FileUpload>? dotNetHelper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
            await js.InvokeVoidAsync("UploadHelpers.setDotNetHelper",
                dotNetHelper);
        }
    }
    [Parameter]
    public Func<ICollection<string>, Task<Dictionary<string, string>>> PresignedUrlFactory { get; set; } = null!;

    [JSInvokable]
    public async Task<Dictionary<string, string>> GeneratePresignedUrls(List<string> fileNames)
    {
        return await PresignedUrlFactory(fileNames);
    }
}
